// require neccessary modules
const express = require("express")
const app = express()
const ytdl = require("ytdl-core")
const websocket = require('ws');
const path = require("path")
const Throttle = require('throttle')

app.use(express.static('public'))


// variables
let song = [ //{ 'vid': 'f1qz8vn3XbY', 'state': true, 'started': null, 'vdetails': null, 'url': '' }
]

let clients = { // 'idisrandomatstart': { 'ws': 'somews', 'id': 'someid' } 
}

var idGen = function(len) {
    return Math.floor(Math.random() * Math.floor('9'.repeat(len)));
}

// Controller Function to get meta details from Youtube Url
const getInfo = async(req, res) => {

    try {
        const { url } = req.query
        const videoId = ytdl.getURLVideoID(url)

        const videoInfo = await ytdl.getInfo(videoId)
        console.log(videoInfo.formats)
        const { thumbnail, author, title } = videoInfo.videoDetails

        return res.status(200).json({
            success: true,
            data: {
                thumbnail: thumbnail['thumbnails'][0].url || null,
                videoId,
                author: author ? author['name'] : null,
                title
            }
        })

    } catch (error) {
        console.log(`error --->`, error);
        return res.status(500).json({ success: false, msg: "Failed to get video info" })
    }

}

//  Send Audio stream  
const getAudioStream = async(req, res) => {

    try {

        const { videoId } = req.params
        const isValid = ytdl.validateID(videoId)

        if (!isValid) {
            throw new Error()
        }

        const videoInfo = await ytdl.getInfo(videoId)
        let audioFormat = ytdl.chooseFormat(videoInfo.formats, {
            filter: "audioonly",
            quality: "highestaudio"
        });

        const { itag, container, contentLength, bitrate } = audioFormat
        console.log(audioFormat)

        // define throttle
        const throttle = new Throttle(bitrate / 8);

        // define headers
        const rangeHeader = req.headers.range || null
        const rangePosition = (rangeHeader) ? rangeHeader.replace(/bytes=/, "").split("-") : null
        console.log(`rangePosition`, rangePosition);
        const startRange = rangePosition ? parseInt(rangePosition[0], 10) : 0;
        const endRange = rangePosition && rangePosition[1].length > 0 ? parseInt(rangePosition[1], 10) : contentLength - 1;
        const chunksize = (endRange - startRange) + 1;

        //         Send partial response
        res.writeHead(206, {
            'Content-Type': `audio/${container}`,
            //'Content-Length': chunksize,
            'Cache-Control': 'no-cache,no-store',
            'Transfer-Encoding': 'chunked',
            //"Content-Range": "bytes " + startRange + "-" + endRange + "/" + contentLength,
            //"Accept-Ranges": "bytes",
        })

        const range = { start: startRange, end: endRange }
        const audioStream = ytdl(videoId, { filter: format => format.itag === 251, range })
        audioStream.pipe(throttle).on('data', (chunk) => {
                res.write(chunk);
            })
            //audioStream.pipe(res)

    } catch (error) {
        console.log(error);
        return res.status(500).send()
    }
}

let getAudioUrl = async(req) => {

    try {
        const isValid = ytdl.validateID(req)

        if (!isValid) {
            return 'novideo'
        }

        const videoInfo = await ytdl.getInfo(req)
        let audioFormat = ytdl.chooseFormat(videoInfo.formats, {
            filter: "audioonly",
            quality: "highestaudio"
        });
        videoInfo.videoDetails.mainurl = audioFormat.url
        return videoInfo.videoDetails
    } catch (error) {
        console.log(error);
        return null
    }
}


let broadcastLive = function() {

}


const PORT = process.env.PORT || 4000
let server = app.listen(PORT, () => console.log(`Running on ${PORT}`))

let broadcastWS = (data) => {

    Object.keys(clients).forEach(e => {
        if (clients[e].ws) {
            try {
                clients[e].ws.send(data)
            } catch (f) {
                console.error(f)
                clients[e].ws = null
            }
        }
    })

}

// Websocet
const wss = new websocket.Server({ server: server });

wss.on('connection', function(ws, request, client) {

    //console.log(ws);
    ws.on('message', function incoming(data) {
        console.log(data);
        try { data = JSON.parse(data); } catch (e) { console.error('ws data not a valid json string', e); }
        switch (data.type) {
            case 'auth':
                if (data.name) {
                    if (data.id) {
                        if (clients[data.name] && clients[data.name].id == data.id) {
                            // User welcome back
                            console.log('User welcome back')
                            clients[data.name].ws = ws
                            ws.send(JSON.stringify({ 'type': 'auth', 'from': 'serveramankrokx', 'action': 'welcomeback' }))
                        } else {
                            console.log('No client registered ')
                            let id = idGen(8)
                            clients[data.name] = { 'ws': ws, 'id': id }
                            ws.send(JSON.stringify({ 'type': 'auth', 'from': 'serveramankrokx', 'name': data.name, 'action': 'welcomenew', 'id': id }))
                        }
                    } else if (!clients[data.name]) {
                        // No client registered 
                        console.log('No client registered ')
                        let id = idGen(8)
                        clients[data.name] = { 'ws': ws, 'id': id }
                        ws.send(JSON.stringify({ 'type': 'auth', 'from': 'serveramankrokx', 'name': data.name, 'action': 'welcomenew', 'id': id }))
                    } else {
                        // name duplicate name or device
                        console.log('duplicate ')
                        let name = data.name + idGen(4)
                        let id = idGen(8)
                        clients[name] = { 'ws': ws, 'id': id }
                        ws.send(JSON.stringify({ 'type': 'auth', 'from': 'serveramankrokx', 'action': 'welcomename', 'name': name, 'id': id }))
                    }
                }
                break;
                console.log(clients)
            case 'queryUrl':
                let videoId = ytdl.getURLVideoID(data.queryUrl)
                getAudioUrl(videoId).then(result => {
                    if (result && result !== 'novideo') {
                        let state = false
                        let date = null
                        if (!(song.length > 0)) {
                            state = true
                            date = new Date()
                        }
                        song.push({ 'vid': videoId, 'state': state, 'started': date, 'vdetails': result, 'url': result.mainurl })
                            //console.log(song)
                    }
                    broadcastWS(JSON.stringify({ 'type': 'chat', 'from': 'serveramankrokx', 'action': 'songAdded', 'title': result.title, 'by': data.from }))
                    if (song.length > 0) {
                        broadcastWS(JSON.stringify({ 'type': 'statusupdate', 'fomr': 'serveramankrokx', 'empty': false, 'songdetails': song[0] }))
                        console.log(song[0])
                    }
                })
                break;
            case 'hi':

                break;

            case 'statusUpdate':
                if (song.length > 0) {
                    ws.send(JSON.stringify({ 'type': 'statusupdate', 'fomr': 'serveramankrokx', 'empty': false, 'songdetails': song[0] }))
                } else { ws.send(JSON.stringify({ 'type': 'statusupdate', 'fomr': 'serveramankrokx', 'empty': true })) }
                break;

            default:
                break;
        }
        console.log(clients)
    });

})

wss.on('close', function close() {

});


// Routes
app.get("/info", getInfo)
app.get("/stream/:videoId", getAudioStream)